// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortableLibrary.Core.Database;

namespace PortableLibrary.Core.Database.Migrations
{
    [DbContext(typeof(PortableLibraryDataContext))]
    [Migration("20180921133232_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.BooksLibrary", b =>
                {
                    b.Property<int>("BooksLibraryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name");

                    b.Property<int?>("Position");

                    b.HasKey("BooksLibraryId");

                    b.ToTable("BookLibraries");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.ExternalBook", b =>
                {
                    b.Property<int>("ExternalBookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Author");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<int?>("Position");

                    b.Property<string>("Title");

                    b.HasKey("ExternalBookId");

                    b.ToTable("ExternalBooks");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBook", b =>
                {
                    b.Property<int>("LibraryBookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<int>("BooksLibraryId");

                    b.Property<string>("Comments");

                    b.Property<string>("CoverImage");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFavourite");

                    b.Property<bool>("IsProcessed");

                    b.Property<bool>("IsProcessing");

                    b.Property<bool>("IsProcessingPlanned");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Position");

                    b.Property<DateTimeOffset>("ReleaseDate");

                    b.HasKey("LibraryBookId");

                    b.HasIndex("BooksLibraryId");

                    b.ToTable("LibrariesBooks");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBook2ExternalBook", b =>
                {
                    b.Property<int>("LibraryBook2ExternalBookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExternalBookId");

                    b.Property<int>("LibraryBookId");

                    b.HasKey("LibraryBook2ExternalBookId");

                    b.HasIndex("ExternalBookId");

                    b.HasIndex("LibraryBookId");

                    b.ToTable("LibraryBooks2ExternalBooks");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBookCategory", b =>
                {
                    b.Property<int>("LibraryBookCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<int>("LibraryBookId");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentLibraryBookCategoryId");

                    b.Property<int?>("Position");

                    b.HasKey("LibraryBookCategoryId");

                    b.HasIndex("LibraryBookId");

                    b.HasIndex("ParentLibraryBookCategoryId");

                    b.ToTable("LibraryBookCategory");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBookGenre", b =>
                {
                    b.Property<int>("LibraryBookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<int>("LibraryBookId");

                    b.Property<string>("Name");

                    b.Property<int?>("Position");

                    b.HasKey("LibraryBookGenreId");

                    b.HasIndex("LibraryBookId");

                    b.ToTable("LibraryBookGenre");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShow", b =>
                {
                    b.Property<int>("LibraryTvShowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Comments");

                    b.Property<string>("CoverImage");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFavourite");

                    b.Property<bool>("IsProcessed");

                    b.Property<bool>("IsProcessing");

                    b.Property<bool>("IsProcessingPlanned");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Position");

                    b.Property<DateTimeOffset>("ReleaseDate");

                    b.Property<int>("TvShowsLibraryId");

                    b.HasKey("LibraryTvShowId");

                    b.HasIndex("TvShowsLibraryId");

                    b.ToTable("LibrariesTvShows");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowCategory", b =>
                {
                    b.Property<int>("LibraryTvShowCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<int>("LibraryTvShowId");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentLibraryTvShowCategoryId");

                    b.Property<int?>("Position");

                    b.HasKey("LibraryTvShowCategoryId");

                    b.HasIndex("LibraryTvShowId");

                    b.HasIndex("ParentLibraryTvShowCategoryId");

                    b.ToTable("LibraryTvShowCategory");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowEpisode", b =>
                {
                    b.Property<int>("LibraryTvShowEpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Comments");

                    b.Property<string>("CoverImage");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("Index");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFavourite");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<bool>("IsWatched");

                    b.Property<bool>("IsWatchingPlanned");

                    b.Property<int>("LibraryTvShowSeasonId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Position");

                    b.Property<DateTime>("ReleaseDate");

                    b.HasKey("LibraryTvShowEpisodeId");

                    b.HasIndex("LibraryTvShowSeasonId");

                    b.ToTable("LibraryTvShowEpisode");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowGenre", b =>
                {
                    b.Property<int>("LibraryTvShowGenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<int>("LibraryTvShowId");

                    b.Property<string>("Name");

                    b.Property<int?>("Position");

                    b.HasKey("LibraryTvShowGenreId");

                    b.HasIndex("LibraryTvShowId");

                    b.ToTable("LibraryTvShowGenre");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowSeason", b =>
                {
                    b.Property<int>("LibraryTvShowSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Comments");

                    b.Property<string>("CoverImage");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("Index");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFavourite");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWaitingToBecomeGlobal");

                    b.Property<bool>("IsWatchingPlanned");

                    b.Property<int>("LibraryTvShowId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Position");

                    b.HasKey("LibraryTvShowSeasonId");

                    b.HasIndex("LibraryTvShowId");

                    b.ToTable("LibraryTvShowSeason");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.TvShowsLibrary", b =>
                {
                    b.Property<int>("TvShowsLibraryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name");

                    b.Property<int?>("Position");

                    b.HasKey("TvShowsLibraryId");

                    b.ToTable("TvShowsLibraries");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBook", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.BooksLibrary.BooksLibrary", "BooksLibrary")
                        .WithMany("Books")
                        .HasForeignKey("BooksLibraryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBook2ExternalBook", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.BooksLibrary.ExternalBook", "ExternalBook")
                        .WithMany()
                        .HasForeignKey("ExternalBookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBook", "LibraryBook")
                        .WithMany()
                        .HasForeignKey("LibraryBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBookCategory", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBook", "LibraryBook")
                        .WithMany("Categories")
                        .HasForeignKey("LibraryBookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBookCategory", "ParentLibraryBookCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentLibraryBookCategoryId");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBookGenre", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.BooksLibrary.LibraryBook", "LibraryBook")
                        .WithMany("Genres")
                        .HasForeignKey("LibraryBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShow", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.TvShowsLibrary.TvShowsLibrary", "TvShowsLibrary")
                        .WithMany("TvShows")
                        .HasForeignKey("TvShowsLibraryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowCategory", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShow", "LibraryTvShow")
                        .WithMany("Categories")
                        .HasForeignKey("LibraryTvShowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowCategory", "ParentLibraryTvShowCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentLibraryTvShowCategoryId");
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowEpisode", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowSeason", "LibraryTvShowSeason")
                        .WithMany("Episodes")
                        .HasForeignKey("LibraryTvShowSeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowGenre", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShow", "LibraryTvShow")
                        .WithMany("Genres")
                        .HasForeignKey("LibraryTvShowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShowSeason", b =>
                {
                    b.HasOne("PortableLibrary.Core.Database.Entities.TvShowsLibrary.LibraryTvShow", "LibraryTvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("LibraryTvShowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
